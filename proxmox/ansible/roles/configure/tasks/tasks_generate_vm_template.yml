---
## Download cloud image
- name: Download cloud image
  ansible.builtin.get_url:
    url: "{{ item.cloud_init_image.url }}"
    dest: "{{ item.cloud_init_image.path }}"
    checksum: "{{ item.cloud_init_image.url_checksum }}"
    mode: "0700"
  changed_when: false

- name: Install qemu-guest-agent into cloud image and set root password
  ansible.builtin.command: |
    virt-customize -a {{ item.cloud_init_image.path }} \
    --root-password password:{{ root_passwd }} \
    --install qemu-guest-agent
  changed_when: false

# Create ansible user without password in the image
- name: Create ansible user without password in the cloud image
  ansible.builtin.command: |
    virt-customize -a {{ item.cloud_init_image.path }} \
    --run-command 'useradd -m -s /bin/bash ansible' \
    --run-command 'mkdir -p /home/ansible/.ssh' \
    --run-command 'chown -R ansible:ansible /home/ansible/.ssh' \
    --run-command 'chmod 700 /home/ansible/.ssh'
  changed_when: false

## Add ansible user to sudo group
- name: Add ansible user to sudo group
  ansible.builtin.command: |
    virt-customize -a {{ item.cloud_init_image.path }} \
    --run-command 'usermod -aG sudo ansible'
  changed_when: false

## Set ansible user to have passwordless sudo
- name: Add ansible user to sudoers with NOPASSWD
  ansible.builtin.command: |
    virt-customize -a {{ item.cloud_init_image.path }} \
    --run-command "echo 'ansible ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"
  changed_when: false

## Add public key to ansible user authorized_keys
- name: Add public key for ansible user
  ansible.builtin.command: |
    virt-customize -a {{ item.cloud_init_image.path }} \
    --run-command "echo '{{ ansible_key_pub }}' > /home/ansible/.ssh/authorized_keys" \
    --run-command 'chown ansible:ansible /home/ansible/.ssh/authorized_keys' \
    --run-command 'chmod 600 /home/ansible/.ssh/authorized_keys'
  changed_when: false

## Create a VM to use as an item
- name: Create a VM to use as an item
  ansible.builtin.command: |
    qm create {{ item.id }} \
    --memory {{ item.memory }} \
    --core {{ item.cpu }} \
    --name {{ item.name }} \
    --net0 virtio,bridge=vmbr0 \
    --description test
  changed_when: false

## Import disk image
- name: Import disk image
  ansible.builtin.command: |
    qm importdisk {{ item.id }} {{ item.cloud_init_image.path }} local-lvm
  changed_when: false

## Attach disk to VM
- name: Attach disk to VM
  ansible.builtin.command: |
    qm set {{ item.id }} \
    --scsihw virtio-scsi-pci \
    --scsi0 local-lvm:vm-{{ item.id }}-disk-0
  changed_when: false

## Configure boot from the image
- name: Configure boot from the image
  ansible.builtin.command: |
    qm set {{ item.id }} --boot c --bootdisk scsi0
  changed_when: false

## Add cloud-init image as CDROM
- name: Add cloud-init image as CDROM
  ansible.builtin.command: |
    qm set {{ item.id }} --ide2 local-lvm:cloudinit
  changed_when: false

## Attach serial console
- name: Attach serial console
  ansible.builtin.command: |
    qm set {{ item.id }} --serial0 socket --vga serial0
  changed_when: false

## Enable agent
- name: Enable agent
  ansible.builtin.command: |
    qm set {{ item.id }} --agent enabled=1
  changed_when: false

## Create item
- name: Create item
  ansible.builtin.command: |
    qm template {{ item.id }}
  changed_when: false

## Resize disk 2G (default) + 18G to 20G
- name: Resize disk 2G (default) + 18G to 20G
  ansible.builtin.command: |
    qm resize {{ item.id }} scsi0 +18G
  changed_when: false
